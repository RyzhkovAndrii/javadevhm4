<b>ЗАДАНИЕ</b>:

Необходимо создать веб-приложение, которое позволяет выполнять CRUD операции над следующими объектами:
==========================
Product:
UUID id;
String name;
BigDecimal price;
Manufacturer manufacturer;
==========================
Manufacturer
UUID id;
String name;
Set<Product> products;
==========================
В базе данных хранятся данные о производителях (Manufacturer) и товарах (Product). Каждый товар имеет одного
производителя, и каждый производитель имеет набор товаров.

Страницы:
1. Manufacturers (список производителей + возможность создавать новых, редактировать и удалять созданных производителей)
2. Products (список товаров + возможность создавать новых, редактировать и удалять созданные товары)

При создании товара выбор производителя реализовать с помощью выпадающего меню.

Результатом выполнения задания должен быть отдельный репозиторий с описанием задачи, подробными инструкциями по запуску
приложения на локальной машине, файлами для инициализации и заполнения БД и ссылкой на видео с демонстрацией работы
приложения.

Необходимо придерживаться паттерна MVC (model, view, controller).
Все классы должны быть грамотно разложены по пакетам и грамотно именованы (model, dao, controller).

Технологии:
Java, SQL, Hibernate, Servlet, JSP, Maven, Tomcat, Git.

========================================================================================================================

ЗАПУСК ПРИЛОЖЕНИЯ НА ЛОКАЛЬНОЙ МАШИНЕ:

1. Созадие БД:
    - создать БД и таблицы, выполнив команды файла scr/resources/initDB.sql;
    - заполнить БД начальными данными (при необходимости), выполнив команды файла scr/resources/populateDB.sql;

2. Настройка файл конфигурации hibernate (scr/resources/hibernate.cfg.xml):
 - connection.url - указать Ваш url для подключения к БД;
 - connection.username - указать Ваш username для подключения к БД;
 - connection.password - указать Ваш пароль для подключения к БД;
 - dialect - указать dialect для типа Вашей БД (по умолчанию - MySQL)

3. Настройка файл pom.xml, указав необходимый тип коннектора для Вашей БД (по умолчанию - mysql-connector-java)

4. Сборка проекта с помощью Maven (следуйте инструкйиям по cборке проектов)

5. Копирование файла javadevhm4.war из папки target/ в папку webapps/ Вашего Tomcat

6. Запуск Tomcat (следуйте инструкйиям по запуску Tomcat)

7. Перход по ссылке 127.0.0.1(localhost):8080/javadevhm4/ (необходимо указыать ip адрес Вашего Tomcat
   (указан для локального сервера); порт 8080 - по умолчанию для Tomcat
   (указывайте порт исходя из конфигурации Вашего Tomcat))